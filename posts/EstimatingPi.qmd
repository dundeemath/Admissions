---
title: "Estimating pi"
format: html 
image: 'logisticmapsolscreenshot.png'
categories: [integration, geometry]
filters:
  - shinylive
---

# Estimating $\pi$

## A circle

Consider a circle of radius $R$ centred at the origin.

:::: {#fig-hmm fig-align="center"}

```{python}
#| echo: false
#| fig-width: 1

import numpy as np
import matplotlib.pyplot as plt

R=1.0
theta=np.linspace(0,2*np.pi,1000)
fig,ax=plt.subplots()
ax.plot(R*np.cos(theta),R*np.sin(theta),'r')
ax.set_xlabel('$x$')
ax.set_ylabel('$y$')
ax.set_aspect('equal')
ax.axis('square')
plt.show()
```

::::


The equation of the circle is given by
$$
x^2+y^2=R^2.
$$ {#eq-circle}

The area of the circle is given by the familiar formula

$$
\pi R^2.
$$

The smallest square within which the circle can be inscribed will have side length $2R$.

::: {#fig-squarecircle fig-align="center"}

```{python}
#| echo: false

import numpy as np
import matplotlib.pyplot as plt

R=1.0
theta=np.linspace(0,2*np.pi,1000)
fig,ax=plt.subplots()
ax.plot(R*np.cos(theta),R*np.sin(theta),'r')
ax.plot([-R,-R],[-R,R],'b')
ax.plot([-R,R],[R,R],'b')
ax.plot([R,R],[R,-R],'b')
ax.plot([R,-R],[-R,-R],'b')

ax.set_xlabel('$x$')
ax.set_ylabel('$y$')
ax.axis('square')

plt.show()
```
:::


Hence the ratio of the area of the circle to that of the square is

$$
\frac{\pi R^2}{4 R^2}=\frac{\pi}{4}.
$$


## Estimating $\pi$

We can use the above result to estimate $\pi$ by randomly sampling points that sit inside the square. The probability of a randomly sampled point falling inside the inscribed circle in @fig-squarecircle is equal to the ratio of the areas, i.e.
$$
\frac{\pi}{4}.
$$ 


We can use a random number generator to uniformly sample $N_s$ points within the square, i.e. 
$$
x_i \in U_{0,2R}, \quad y_i \in U_{0,2R}, \quad i=1,..,N.
$$
Here $U$ represents a uniform distribution and $N$ is the number of sampled points. 

We can then count the number of randomly sampled points, $N_c$, that sit inside the circle, i.e. with coordinates that satisfy the inequality
$$
x_i^2+y_i^2< R^2.
$$

We can then estimate $\pi$ using the formula
$$
\hat{\pi}\sim 4\frac{N_c}{N_s}.
$$

In @fig-apppi  we use an app to explore the approximation of $\pi$. Here you can explore how the estimate for $\pi$ depends on the number of samples and consider circles of different radii.

In the top plot the distribution of sampled points is plotted for a given realisation with the parameter values as you have chosen. In the bottom plot the estimate of $\pi$ is averaged over 100 realisations and plotted against the number of sampled points, $N$.




::: {#fig-apppi fig-align="center"}

```{shinylive-python}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 500

from shiny import App, Inputs, Outputs, Session, render, ui
from shiny import reactive

import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
from scipy.integrate import odeint

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
    ui.input_slider(id="N",label="N",min=10,max=3000,value=10,step=1),
    ui.input_slider(id="R",label="R",min=2.0,max=15.0,value=10.0,step=1),
    ui.input_slider(id="L",label="L",min=15.0,max=30.0,value=20.0,step=1),             
     
              
          
            ),

        ui.panel_main(ui.output_plot("plot"),),
    ),
)

def server(input, output, session):
    

    def estimate_pi(N,R,L): 
        x = np.random.uniform(0,L,N)
        y = np.random.uniform(0,L,N)

        radius=((x-L/2)**2+(y-L/2)**2)**(0.5)
        num_points_inside_circle=len(radius[radius<=R])

        pi_est=(4.0*num_points_inside_circle/N)

        return x,y,pi_est

    @render.plot
    def plot():
        fig, ax = plt.subplots(2,1)
        #ax.set_ylim([-2, 2])
        # Filter fata
        
        
        N=int(input.N())
        R=float(input.R())
        L=float(input.L())
        
    
        x,y,pi_est=estimate_pi(N,R,L)

        radius=((x-L/2)**2+(y-L/2)**2)**(0.5)
        
        ax[0].plot(x[radius<R],y[radius<R],'b.')
        ax[0].plot(x[radius>R],y[radius>R],'k.')

        ax[0].set_xlabel('$x$')
        ax[0].set_ylabel('$y$')

        theta=np.linspace(0,2*np.pi,1000)
        ax[0].plot(R*np.cos(theta)+L/2.0,R*np.sin(theta)+L/2.0,'r')
        ax[0].set_title('$\hat{\pi}$='+str(pi_est))

        
        N_vec=np.linspace(10,3000,80,dtype=int)
        pi_est_vec=np.zeros_like(N_vec,dtype=float)
        n_samples=100
        for i in range(len(N_vec)):
            pi_est_i=np.zeros((n_samples,1),dtype=float)
            for j in range(n_samples):
                x,y,pi_est=estimate_pi(N_vec[i],R,L)
                pi_est_i[j]=pi_est
            pi_est_vec[i]=np.mean(pi_est_i)

        ax[1].plot(N_vec,pi_est_vec,'.',N_vec,np.pi*np.ones_like(N_vec))
        ax[1].set_xlabel('$N$')
        ax[1].set_ylabel('$\hat{\pi}$')
        #plt.Circle([0.0, 0.0 ],R,fill = False,axis=ax)
        #ax.Circle((0.0, 0.0 ),R,fill = False )


        fig.tight_layout()
        plt.grid()
        plt.show()
    
app = App(app_ui, server)
```
:::


## Monte Carlo integration

You may have previously come across definite integrals of the form

$$
I=\int_a^b f(x)\mathrm{d}x.
$$

A specific  example is
$$
\int_0^1 x^2 \mathrm{d}x.
$$

If you have not yet come across definite integrals that is fine.
For the purposes of this page, the value of the integral is simply the area underneath the curve (see blue shaded region in @fig-intdemo).

::: {#fig-intdemo fig-align="center"}

```{python}
#| echo: false

import numpy as np
import matplotlib.pyplot as plt

R=1.0
x=np.linspace(0,1,1000)
fig,ax=plt.subplots()

x_fill=np.zeros((len(x)+2,2),dtype=float)
x_fill[0:len(x),0]=x
x_fill[0:len(x),1]=x**2
x_fill[len(x),0]=1
x_fill[len(x),1]=0
x_fill[len(x)+1,0]=0
x_fill[len(x)+1,1]=0

#x_fill.pop([0,0])

ax.plot(x,x**2,'r')
#ax[1].fill([[0,0],[x,x**2],[1,0]],'b')
ax.fill(x_fill[:,0],x_fill[:,1])


ax.set_xlabel('$x$')
ax.set_ylabel('$y$')
ax.axis('square')

plt.show()
```
:::


To compute the integral we can use a similar method to that used for estimating $\pi$:

-  circumscribe the region to be integrated within a domain of known area (e.g. see rectangle in @fig-apppisquare) 
-  uniformly sample points within the rectangle
-  count the fraction of points that lie in the shaded region
- the value of the integral can be approximated by
$$
\hat{I} \sim \textrm{Area of Rectangle} * \textrm{Fraction of sampled points in target region}
$$

::: {#fig-apppisquare fig-align="center"}

```{python}
#| echo: false

import numpy as np
import matplotlib.pyplot as plt

R=1.0
x=np.linspace(0,1,1000)
fig,ax=plt.subplots()


x_fill=np.zeros((len(x)+2,2),dtype=float)
x_fill[0:len(x),0]=x
x_fill[0:len(x),1]=x**2
x_fill[len(x),0]=1
x_fill[len(x),1]=0
x_fill[len(x)+1,0]=0
x_fill[len(x)+1,1]=0

#x_fill.pop([0,0])

ax.plot(x,x**2,'r')
#ax[1].fill([[0,0],[x,x**2],[1,0]],'b')
ax.fill(x_fill[:,0],x_fill[:,1])

ax.plot([0,0],[0,1],'b',[1,0],[1,1],'b',[1,1],[1,0],'b',[1,0],[0,0],'b')

ax.set_xlabel('$x$')
ax.set_ylabel('$y$')
ax.axis('square')

plt.show()
```

:::



In @fig-integapp you can use a Monte Carlo method to approximate many common integrals. @tbl-integrands provides the syntax needed for  available functions.


| Integrand | Input text  |
|---------|:-----|
|$\sqrt{x}$      | sqrt(x)   |
| $\sin{x}$     | sin(x)  |
| $\cos{x}$     | cos(x)  |
| $\ln{x}$       | log(x)   |
| $x^2$       | x^2  |
| $e^x$       | exp(x)  |
| $\pi$       | pi  |

: Syntax for inputting elementary functions into the integrator in @fig-integapp. {#tbl-integrands}

In @tbl-integrands2 some examples are provided that demonstrate syntax for more complicated functions.

In the top plot the distribution of sampled points is plotted for a given realisation with the parameter values as you have chosen. In the bottom plot the estimate of the integral is averaged over 100 realisations and plotted against the number of sampled points, $N$.


| Integrand | Input text  |
|---------|:-----|
| $x^2+2x+1$       | x^2+2*x+1  |
| $e^{-\sin^2{x}}$     | exp(-sin(x)*sin(x))  |

: Examples of syntax for inputting more complex functions into the integrator in @fig-integapp. {#tbl-integrands2}


::: {#fig-integapp}

```{shinylive-python}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 500

from shiny import App, Inputs, Outputs, Session, render, ui
from shiny import reactive

import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import sympy as sp

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
    ui.input_slider(id="N",label="N",min=10,max=3000,value=10,step=1),
    ui.input_slider(id="a",label="a",min=0.0,max=3.0,value=0.0,step=0.01),
    ui.input_slider(id="b",label="b",min=1.0,max=10.0,value=1.0,step=0.01), 
    ui.input_text(id='text',label="Integrand as function of x",value="sin(x)")            
     
            ),

        ui.panel_main(ui.output_plot("plot"),),
    ),
)

def server(input, output, session):
    

    def function_f(x,text):

        #f=np.sin(4*x)
        f=np.sin(10*x)

        f=parse_to_numpy_function(text,x)


        return f

    def parse_to_numpy_function(expression,x):
        # Replace common mathematical operators with NumPy equivalents
        expression = expression.replace("^", "**")  # Replace '^' with '**'
        expression = expression.replace("sin", "np.sin")
        expression = expression.replace("cos", "np.cos")
        expression = expression.replace("tan", "np.tan")
        expression = expression.replace("log", "np.log")
        expression = expression.replace("sqrt", "np.sqrt")
        expression = expression.replace("exp", "np.exp")
        expression = expression.replace("pi", "np.pi")

        # Create a lambda function for safe evaluation
        #def numpy_function(x):
        return eval(expression)
    
        #return expression


    def estimate_int(a,b,N,text): 
        x = np.random.uniform(a,b,N)

        f=function_f(x,text)
        
        max_f=np.max(f)
        min_f=np.min(f)

        y = np.random.uniform(min_f,max_f,N)

        
        num_points_inside_circle=len(y[(y>0)&(y<=f)])-len(y[(y<0)&(y>=f)])

        int_est=(b-a)*(max_f-min_f)*num_points_inside_circle/N

        return x,y,int_est

    @render.plot
    def plot():
        fig, ax = plt.subplots(2,1)
        #ax.set_ylim([-2, 2])
        # Filter fata
        
        
        N=int(input.N())
        a=float(input.a())
        b=float(input.b())
        text=input.text()

        
        
        
    
        x,y,int_est=estimate_int(a,b,N,text)
        
        ax[0].plot(x[(y>0)&(y<function_f(x,text))],y[(y>0)&(y<function_f(x,text))],'b.')
        ax[0].plot(x[(y<0)&(y>function_f(x,text))],y[(y<0)&(y>function_f(x,text))],'m.')
        ax[0].plot(x[(y>0)&(y>function_f(x,text))],y[(y>0)&(y>function_f(x,text))],'k.')
        ax[0].plot(x[(y<0)&(y<function_f(x,text))],y[(y<0)&(y<function_f(x,text))],'k.')
        #ax[0].plot(x[(y>0)&(y>function_f(x))],y[(y>0)&(y>function_f(x))],'k.')

        ax[0].set_xlabel('$x$')
        ax[0].set_ylabel('$y$')

        x_plot=np.linspace(a,b,1000,dtype=float)
        y_plot=function_f(x_plot,text)
        ax[0].plot(x_plot,y_plot,'r')
        ax[0].set_title('$\hat{I}$='+str(int_est))

        
        N_vec=np.linspace(10,3000,80,dtype=int)
        int_est_vec=np.zeros_like(N_vec,dtype=float)
        n_samples=200
        for i in range(len(N_vec)):
            int_est_i=np.zeros((n_samples,1),dtype=float)
            for j in range(n_samples):
                x,y,int_est=estimate_int(a,b,N_vec[i],text)
                int_est_i[j]=int_est
            int_est_vec[i]=np.median(int_est_i)

        ax[1].plot(N_vec,int_est_vec,'.')
        ax[1].set_xlabel('$N$')
        ax[1].set_ylabel('$\hat{I}$')

        fig.tight_layout()

        plt.grid()
        plt.show()
    
app = App(app_ui, server)
```
:::


Exercises:

 - Show that
 $$ 
   \int_0^{1}x^2 \mathrm{d}x =\frac{1}{3}.
  $$


 - Estimate the integral 
 $$
 f(x)=\frac{\sin(x)\sin(x)\sin(x)}{1+x^2}
 $$
 - Demonstrate that 
  $$ 
   \int_0^{\infty}e^{-x^2}\mathrm{d}x =\frac{\sqrt{\pi}}{2}
  $$
  Note that this calculation provides an alternative method to estimate $\pi$!
  - Estimate the integral 
  $$ 
   \int_0^{1}\frac{x^2}{1+x^2}\mathrm{d}x.
  $$
  - Demonstrate that
  $$ 
   \int_0^{\pi}\sin(x) \mathrm{d}x\sim 2
  $$
  - Demonstrate that
  $$ 
   \int_0^{2\pi}\sin(x) \mathrm{d}x\sim 0
  $$
  Can you spot how the symmetry results in cancellation of the positive (blue) and negative (magenta) contributions?

:::{.callout-warning}

- The algorithm implemented in @fig-integapp above will always provide a numerical estimate. However, some functions are not integrable. In this case the numerical estimate provided by the app will be completely incorrect. We must understand the limitations of algorithms before trusting their output!
- There exist functions that are integrable but cannot be estimated using the above technique. We cannot rely solely on algorithms. 
- How do we know how accurate the integral estimate is?
- There exist much more computationally efficient methods for estimating integrals to a given accuracy.

:::


:::{.callout-note}

At Dundee, core concepts from integration  are introduced in the modules  *Maths 1A* and *Maths 1B* and developed further in the modules  *Maths 2A* and *Maths 2B*. 

In the modules *Introduction to Programming* and *Computer Algebra and Dynamical systems* you would be introduced to techniques that enable you to perform numerical integration. 

You can find out more about these modules [here](https://www.dundee.ac.uk/undergraduate/mathematics-bsc/teaching-and-assessment).

:::





