[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/GraduateEmployment.html",
    "href": "posts/GraduateEmployment.html",
    "title": "Graduate employment",
    "section": "",
    "text": "A mathematics degree will enable you to become a logical numerate problem solver. Over the course of your degree you will develop"
  },
  {
    "objectID": "posts/GraduateEmployment.html#career-earnings",
    "href": "posts/GraduateEmployment.html#career-earnings",
    "title": "Graduate employment",
    "section": "Career earnings",
    "text": "Career earnings\n\n\n\n\n\nData provided by HESA (2020/2021)"
  },
  {
    "objectID": "posts/GraduateEmployment.html#where-our-graduates-get-employed",
    "href": "posts/GraduateEmployment.html#where-our-graduates-get-employed",
    "title": "Graduate employment",
    "section": "Where our graduates get employed?",
    "text": "Where our graduates get employed?\n\nData analyst\nActuary\nAccountant\nPhD\nData scientist\nTransport engineer\nManagement consultant\nTeacher\nOperations analyst\nFinancial engineer\nOperations research\nTax consultant\nEnergy risk analyst\nInsurance underwriter\nSoftware engineer\nCredit risk analyst\nHedge fund analyst"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to the Dundee Mathematics Admissions page.\nYou can find lots of interesting information about mathematics careers here.\nYou can find a link to the Dundee Mathematics student society here."
  },
  {
    "objectID": "posts/QuadraticCubicRoots.html",
    "href": "posts/QuadraticCubicRoots.html",
    "title": "Roots of quadratic/cubic equations",
    "section": "",
    "text": "Consider the cubic equation \\[\nax^3+bx^2+cx+d=0, \\ \\ \\quad a,b,c \\in \\Re.\n\\tag{1}\\]\nA special case you may have seen before occurs when \\(a=0\\). Hence \\[\nbx^2+cx+d=0, \\ \\ \\quad b,c \\in \\Re.\n\\]\nIn this case the roots of the quadratic are \\[\nx=\\frac{-c\\pm\\sqrt{c^2-4bd}}{2b}.\n\\]\nIn the app below you can play with the parameter \\(a\\), \\(b\\), \\(c\\) and \\(d\\) and explore how they affect the form of the cubic equation EquationÂ 1. The roots of the cubic are reported in the figure title and the red crossed depict the real parts of the roots.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 800\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n    ui.input_slider(id=\"a\",label=\"a\",min=-5,max=5,value=1.0,step=0.1),\n    ui.input_slider(id=\"b\",label=\"b\",min=-5.0,max=5.0,value=1.0,step=0.1),\n    ui.input_slider(id=\"c\",label=\"c\",min=-5.0,max=10.0,value=5.0,step=0.1),            \n    ui.input_slider(id=\"d\",label=\"d\",min=-5.0,max=10.0,value=5.0,step=0.1),            \n    ui.input_slider(id=\"min_x\",label=\"Min x \",min=-10.0,max=10.0,value=-5.0,step=0.1),  \n    ui.input_slider(id=\"max_x\",label=\"Max x\",min=-10.0,max=10.0,value=5.0,step=0.1),\n        \n            ),\n\n        ui.panel_main(ui.output_plot(\"plot\"),),\n    ),\n)\n\ndef server(input, output, session):\n    \n    @render.plot\n    def plot():\n        fig, ax = plt.subplots()\n        #ax.set_ylim([-2, 2])\n        # Filter fata\n        \n        \n        a=float(input.a())\n        b=float(input.b())\n        c=float((input.c()))\n        d=float((input.d()))\n\n        min_x=float(input.min_x())\n        max_x=float(input.max_x())\n\n        \n        # Define rhs of LV ODEs\n        def rhs(x,a,b,c,d):\n          rhs=np.zeros_like(x,dtype=float)\n          rhs=a*x**3+b*x**2+c*x+d\n\n          return rhs\n\n        # Define discretised t domain\n        x = np.linspace(min_x, max_x, 1000)\n\n        # define initial conditions\n        \n        # Compute numerical solution of ODEs\n        y = rhs(x,a,b,c,d)\n\n        coeff=[a,b,c,d]\n        roots=np.roots(coeff)\n\n        roots=np.round(roots,2)\n        ax.plot(x, y,roots,np.zeros_like(roots),'rx')\n        ax.set_xlabel('$x$')\n        ax.set_ylabel('$y$')\n        y_lim_p=-15.0 #np.min([100,np.max(y)])\n        y_lim_m=15.0 #np.max([-100,np.min(y)])\n\n        ax.set_ylim([y_lim_m,y_lim_p])\n\n        ax.grid()\n\n        text_x=0.25*(min_x+max_x)\n        text_y=np.mean(y)\n        #title_Str= = ' '.join(map(str, (roots)))\n        title_Str=[(\"R\"+ str(j) +\" = \" + str(roots[j]) ) for j in range(len(roots))]\n        title_Str = str(title_Str)[1:-1]\n\n        ax.set_title(title_Str)\n        #ax.set_title([(\"R\"+ str(j) +\" = \" + str(roots[j]) ) for j in range(len(roots))])\n\n        #plt.show()\n    \napp = App(app_ui, server)\n\nExercises\n\nset \\(a=0\\).\n\nhow many roots are there?\nhow does the local maximum/minimum of the quadratic depend on the sign of the parameter \\(b\\)?\nwhy are there complex roots when the condition \\(c^2-4bd&lt;0\\) is satisfied?\n\nconsider \\(a&gt;0\\).\nhow many real roots are there?\nshow there is always a trivial root in the case \\(d=0\\).\nshow that in the case \\(a=d=1\\) with \\(b=c=0\\) that the roots are 1, \\(\\frac{1+j\\sqrt{3}}{2}\\), \\(\\frac{1-j\\sqrt{3}}{2}\\) where \\(j=\\sqrt{-1}\\).\n\n\n\n\n\n\n\nNote\n\n\n\nAt Dundee, the mathematical tools needed are developed in modules:\n\nMaths 1A\nMaths 1B\n\nYou can find out more about these modules here."
  },
  {
    "objectID": "posts/TheSIRModel.html",
    "href": "posts/TheSIRModel.html",
    "title": "The SIR model",
    "section": "",
    "text": "Infectious disease\nInfectious diseases can have severe health outcomes for individuals who contract them. They can also place an unmanageably large demand on the health service.\nInfectious diseases can be characterised using their basic reproduction number.\n\nInfectious disease basic reproduction numbers Source.\n\n\nDisease\n\\(R_0\\)\n\n\n\n\nMeasles\n12-18\n\n\nChickenpox\n10-12\n\n\nRubella\n6-7\n\n\nCommon cold\n2-3\n\n\nCovid 19 (Omicron)\n9.5\n\n\n\n\n\nMathematical modelling of infectious diseases\nWe can use mathematics to study the dynamics of an infectious disease within a population. In the app below we simulating a model of infectious disease (more details on the model below).\nThe model is known as the SIR model as the the variables in the model are:\n\n\\(S(t)\\) - size of susceptible population at time \\(t\\)\n\\(I(t)\\) - size of infected population at time \\(t\\)\n\\(R(t)\\) - size of recovered/post-infected population at time \\(t\\)\n\nThe SIR model has two parameters:\n\n\\(r\\) - infection rate\n\\(a\\) - recovery rate\n\nFrom a public health perspective, one could propose that there is some level of infectiousness, \\(I_{max}\\), which must be avoided. The challenge is to manage the disease such that \\(I(t)&lt;I_{max}\\) for all \\(t\\).\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 800\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n    ui.input_slider(id=\"r\",label=\"Infectivity\",min=0.00001,max=0.001,value=0.001,step=0.00001),\n    ui.input_slider(id=\"S0\",label=\"initial susceptible pop\",min=1000.0,max=8000.0,value=4000.1,step=5.0),\n    ui.input_slider(id=\"a\",label=\"Num days infectiousness\",min=2.0,max=8.0,value=5.0,step=0.1),            \n    ui.input_slider(id=\"I0\",label=\"Initial infectious population \",min=0.0,max=17.0,value=17.0,step=0.5),  \n    ui.input_slider(id=\"T\",label=\"Simulation time\",min=0.0,max=60.0,value=20.0,step=0.5),\n    ui.input_slider(id=\"max_inf\",label=\"Max. infectiousness\",min=0.0,max=10000.0,value=2500.0,step=100.5),             \n          \n            ),\n\n        ui.panel_main(ui.output_plot(\"plot\"),),\n    ),\n)\n\ndef server(input, output, session):\n    \n    @render.plot\n    def plot():\n        fig, ax = plt.subplots()\n        #ax.set_ylim([-2, 2])\n        # Filter fata\n        \n        \n        r=float(input.r())\n        S_0=float(input.S0())\n        a=float(np.log(2)/(input.a()))\n        I_0=float(input.I0())\n        T=float(input.T())\n        max_inf=float(input.max_inf())\n\n        R_0=r*S_0/a\n        \n        # Define rhs of LV ODEs\n        def rhs_sir_model(x,t,r,a):\n          rhs=np.zeros_like(x,dtype=float)\n          S=x[0]\n          I=x[1]\n          R=x[2]\n\n          \n\n          dS_dt=-r*I*S\n          dI_dt=r*I*S-a*I\n          dR_dt=a*I\n\n          rhs[0]=dS_dt\n          rhs[1]=dI_dt\n          rhs[2]=dR_dt\n\n          return rhs\n\n        # Define discretised t domain\n        t = np.linspace(0, T, 1000)\n\n        # define initial conditions\n        init_cond=[S_0,I_0,0.0]\n        \n        # Compute numerical solution of ODEs\n        sol1 = odeint(rhs_sir_model, init_cond,t,args=(r,a))\n\n        # Plot results\n        S=sol1[:,0]\n        I=sol1[:,1]\n        R=sol1[:,2]\n        \n        ax.plot(t, S, 'b',t,I,'r',t,R,'k')\n        ax.plot(t,max_inf*np.ones_like(t),'--')\n        ax.legend(['S','I','R','Max. allowed infectiousness'],loc='best')\n        ax.set_xlabel('$t$')\n        ax.set_title('R_0 =' + str(R_0))\n\n        #plt.grid()\n        #plt.show()\n    \napp = App(app_ui, server)\n\n\nExercises with the app\n\ncan you determine what value the infectivity parameter must go below in order that \\(I(t)&lt;I_{max}\\)?\nif covid omicron has an \\(R_0=9.5\\) and an infectious period of 6 days, can you estimate the value of the infectivity parameter for a susceptible population of 5000?\nwhich parameters in the app best represent the effect of vaccination of a section of the population?\n\n\n\nThe SIR model equations\nThe SIR model is formulated as a system of ordinary differential equations.\nThe governing equations are: \\[\n\\begin{aligned}\n\\frac{dS}{dt}&=-rIS, \\\\\n\\frac{dI}{dt}&=rIS-aI, \\\\\n\\frac{dR}{dt}&=aI.\n\\end{aligned}\n\\]\nThe initial conditions are:\n\\[\n\\begin{aligned}\nS(t=0)&=S_0, \\\\\nI(t=0)&=I_0, \\\\\nR(t=0)&=R_0.\n\\end{aligned}\n\\]\n\n\n\n\n\n\nNote\n\n\n\nAt Dundee, the mathematical tools needed are developed in modules:\n\nMaths 1A, 1B, 2A and 2B (Core maths modules)\nComputer algebra and dynamical systems\nMathematical Biology I\nMathematical Biology II\n\nYou can find out more about these modules here."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Maths-admissions",
    "section": "",
    "text": "Roots of quadratic/cubic equations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe SIR model\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGraduate employment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\n\nWelcome\n\n\n\n\n\n\n\n\n\nMar 24, 2024\n\n\nPhilip Murray\n\n\n\n\n\n\nNo matching items"
  }
]